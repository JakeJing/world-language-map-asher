---
title: "Interactive Map of World's Languages"
subtitle: "from Atlas of the World's Languages"
format: 
  html:
    toc: false
    theme: cosmo
    css: styles.css
    code-fold: true
    embed-resources: false  # Don't embed everything in one file
    minimal: true
    resources: 
      - "data/"  # Reference external data files
execute:
  echo: false  # Hide code by default
  warning: false
  message: false
  # cache: true   # Cache computations
  # freeze: auto  # Freeze expensive computations
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

```{r libraries}
#| echo: false
library(sf)
library(leaflet)
library(leaflet.extras)
library(dplyr)
library(purrr)
library(glue)
library(DT)
library(plotly)
library(viridis)
library(RColorBrewer)
library(htmltools)
library(htmlwidgets)
library(rmapshaper)

prepare_geojson_data <- function(path) {
  # Load the contemporary language data
  geo_sf <- st_read(glue("{path}/languages.geojson"), quiet = TRUE) %>% 
  st_make_valid() %>%
  ms_simplify(keep = 0.1, keep_shapes = TRUE)
  languages_csv <- read.csv(glue("{path}/languages.csv"))

  geo_sf <- geo_sf %>%
    rename(
      Glottocode = cldf.languageReference,
      Family = family
    ) %>%
    mutate(
      Family = ifelse(is.na(Family), "Unclassified", Family)
    ) %>%
    left_join(map_tb, by = c("Glottocode" = "id")) %>%
    left_join(map_tb %>%
      select(id, parent_name = name), by = c("parent_id" = "id")) %>%
    mutate(
      parent_name = ifelse(is.na(parent_name), "unclassified", parent_name)
    ) %>%
    mutate_if(is.character, as.factor)

  result <- geo_sf %>%
    split(.$Family) %>%
    map_dfr(~ {
      n_unique <- length(levels(.x$parent_id))
      colors <- rainbow(n_unique, alpha = 0.7)
      .x %>%
        mutate(parent_id_color = colors[as.numeric(parent_id)])
    })
  return(result)
}

create_family_maps <- function(family_name, traditional_sf, contemporary_sf, 
                              custom_view = NULL) {
  # Filter data
  traditional_filtered <- traditional_sf %>%
    filter(Family == family_name)

  contemporary_filtered <- contemporary_sf %>%
    filter(Family == family_name)

  # Get view parameters
  if (!is.null(custom_view)) {
    # Use custom view if provided
    view_params <- custom_view
  } else {
    # Default view
    view_params <- list(lng = 20, lat = 0, zoom = 3)
  }

  # Create side-by-side maps
  tagList(
    div(
      style = "display: flex; gap: 20px; margin-bottom: 30px;",

      # Traditional Map
      div(
        style = "flex: 1;",
        h4("Traditional Speaker Areas", style = "text-align: center;"),
        leaflet() %>%
          addTiles() %>%
          addPolygons(
            data = traditional_filtered,
            fillColor = ~parent_id_color,
            fillOpacity = ~fill.opacity,
            weight = 1,
            color = "#333333",
            opacity = 0.8,
            label = ~ paste0(
              "<b>Language:</b> ", title, "<br>",
              "<b>Glottocode:</b> ", Glottocode, "<br>",
              "<b>Parent Group:</b> ", parent_name, "<br>"
            ) %>% lapply(HTML),
            labelOptions = labelOptions(
              style = list("font-weight" = "normal", padding = "3px 8px"),
              textsize = "15px",
              direction = "auto"
            ),
            highlightOptions = highlightOptions(
              weight = 3, color = "#666", fillOpacity = 0.9, bringToFront = TRUE
            )
          ) %>%
          addFullscreenControl() %>%
          setView(lng = view_params$lng, lat = view_params$lat, zoom = view_params$zoom)
      ),

      # Contemporary Map
      div(
        style = "flex: 1;",
        h4("Contemporary Speaker Areas", style = "text-align: center;"),
        leaflet() %>%
          addTiles() %>%
          addPolygons(
            data = contemporary_filtered,
            fillColor = ~parent_id_color,
            fillOpacity = ~fill.opacity,
            weight = 1,
            color = "#333333",
            opacity = 0.8,
            label = ~ paste0(
              "<b>Language:</b> ", title, "<br>",
              "<b>Parent Group:</b> ", parent_name, "<br>",
              "<b>Glottocode:</b> ", Glottocode
            ) %>% lapply(HTML),
            labelOptions = labelOptions(
              style = list("font-weight" = "normal", padding = "3px 8px"),
              textsize = "15px",
              direction = "auto"
            ),
            highlightOptions = highlightOptions(
              weight = 3, color = "#666", fillOpacity = 0.9, bringToFront = TRUE
            )
          ) %>%
          addFullscreenControl() %>%
          setView(lng = view_params$lng, lat = view_params$lat, zoom = view_params$zoom)
      )
    )
  )
}
```


```{r load-data}
#| eval: false
#| include: false
# Load Glottolog data for parent_id information
glottolog_data <- read.csv("glottolog_languoid/languoid.csv")
map_tb <- glottolog_data %>%
  select(id, parent_id, name)
# prepare contemporary and traditional data
contemporary_sf <- prepare_geojson_data("asher2007world/cldf/contemporary")
traditional_sf <- prepare_geojson_data("asher2007world/cldf/traditional")
# saveRDS(contemporary_sf, "contemporary_sf.rds")
# saveRDS(traditional_sf, "traditional_sf.rds")
```


```{r}
#| echo: false
contemporary_sf <- readRDS("contemporary_sf.rds")
traditional_sf <- readRDS("traditional_sf.rds") 
```


This visualization explores the distribution of world's languages based on the [Asher & Moseley (2007)](https://www.routledge.com/Atlas-of-the-Worlds-Languages/Asher-Moseley/p/book/9781315829845?srsltid=AfmBOor_QJOYhGh2ND2aaCP14OHbOHhJ6rOLfgAAPqPPf8vpS-rTtzBN) Atlas of the World's Languages. This visualization builds on the recent work of [Ranacher et al. (2025)](https://doi.org/10.1038/s41597-025-05828-6), who created a global and interoperable dataset of linguistic distributions derived from the Atlas of the World's Languages. Each polygon represents a geographic area where a specific language is spoken. Two maps are shown for each language: one for the traditional speaker areas and one for the contemporary speaker areas.

**Important!** The resolution of the map is reduced to 10% of the original data via `ms_simplify` function to reduce the size of the rendered HTML page. If you need higher resolution, you can remove the `ms_simplify` line in the `prepare_geojson_data` function and render the qmd file locally.

### Main Interactive Maps

```{r main-maps}
#| echo: false
tagList(
  div(
    id = "main-maps-container",
    style = "display: flex; flex-direction: column; gap: 20px; margin-bottom: 30px;",
    div(
      id = "traditional-main-map-section",
      style = "flex: 1; height: 300px;",
      h4("Traditional Speaker Areas", style = "text-align: center;"),
      leaflet("traditional_main_map") %>%
        addTiles() %>%
        addPolygons(
          data = traditional_sf,
          fillColor = ~fill, # Use the original fill colors from the data
          fillOpacity = ~fill.opacity, # Use the existing fill.opacity column
          weight = 1,
          color = "#333333",
          opacity = 0.8,
          layerId = ~Glottocode, # Add layer ID for interaction
          # Hover tooltip instead of click popup
          label = ~ paste0(
            "<b>Language:</b> ", title, "<br>",
            "<b>Glottocode:</b> ", Glottocode, "<br>",
            "<b>Parent Group:</b> ", parent_name
          ) %>% lapply(HTML),
          labelOptions = labelOptions(
            style = list(
              "font-weight" = "normal",
              padding = "3px 8px"
            ),
            textsize = "15px",
            direction = "auto"
          ),
          highlightOptions = highlightOptions(
            weight = 3,
            color = "#666",
            fillOpacity = 0.9,
            bringToFront = TRUE
          )
        ) %>%
        addFullscreenControl() %>%
        setView(lng = 0, lat = 30, zoom = 1.5) %>%
        htmlwidgets::onRender("
          function(el, x) {
            window.leafletMaps['traditional_main_map'] = this;
          }
        ")
    ),
    div(
      id = "contemporary-main-map-section",
      style = "flex: 1; height: 300px;",
      h4("Contemporary Speaker Areas", style = "text-align: center;"),
      leaflet("contemporary_main_map") %>%
        addTiles() %>%
        addPolygons(
          data = contemporary_sf,
          fillColor = ~fill, # Use the original fill colors from the data
          fillOpacity = ~fill.opacity, # Use the existing fill.opacity column
          weight = 1,
          color = "#333333",
          opacity = 0.8,
          layerId = ~Glottocode, # Add layer ID for interaction
          # Hover tooltip instead of click popup
          label = ~ paste0(
            "<b>Language:</b> ", title, "<br>",
            "<b>Parent Group:</b> ", parent_name, "<br>",
            "<b>Glottocode:</b> ", Glottocode
          ) %>% lapply(HTML),
          labelOptions = labelOptions(
            style = list(
              "font-weight" = "normal",
              padding = "3px 8px"
            ),
            textsize = "15px",
            direction = "auto"
          ),
          highlightOptions = highlightOptions(
            weight = 3,
            color = "#666",
            fillOpacity = 0.9,
            bringToFront = TRUE
          )
        ) %>%
        addFullscreenControl() %>%
        setView(lng = 0, lat = 30, zoom = 1.5) %>%
        htmlwidgets::onRender("
          function(el, x) {
            window.leafletMaps['contemporary_main_map'] = this;
          }
        ")
    )
  )
)
```

## Major Language Families

Below are interactive maps for major language families in the traditional and contemporary data. Each family shows traditional (left) and contemporary (right) maps side-by-side. Hover over any polygon to see detailed language information.


### Atlantic-Congo

```{r}
#| echo: false
create_family_maps("Atlantic-Congo", traditional_sf, contemporary_sf,
                   custom_view = list(lng = 15, lat = -5, zoom = 3))
```

### Austronesian

```{r}
#| echo: false
create_family_maps("Austronesian", traditional_sf, contemporary_sf,
                   custom_view = list(lng = 120, lat = -10, zoom = 3))
```

### Sino-Tibetan

```{r}
#| echo: false
create_family_maps("Sino-Tibetan", traditional_sf, contemporary_sf,
                   custom_view = list(lng = 100, lat = 30, zoom = 4))
```

### Nuclear Trans New Guinea

```{r}
#| echo: false
create_family_maps("Nuclear Trans New Guinea", traditional_sf, contemporary_sf,
                   custom_view = list(lng = 140, lat = -5, zoom = 5))
```

### Afro-Asiatic

```{r}
#| echo: false
create_family_maps("Afro-Asiatic", traditional_sf, contemporary_sf,
                   custom_view = list(lng = 25, lat = 20, zoom = 3))
```


### Indo-European

```{r}
#| echo: false
create_family_maps("Indo-European", traditional_sf, contemporary_sf,
                   custom_view = list(lng = 25, lat = 30, zoom = 2))
```


### Austroasiatic

```{r}
#| echo: false
create_family_maps("Austroasiatic", traditional_sf, contemporary_sf,
                   custom_view = list(lng = 95, lat = 15, zoom = 4))
```

### Uralic

```{r}
#| echo: false  
create_family_maps("Uralic", traditional_sf, contemporary_sf,
                   custom_view = list(lng = 55, lat = 60, zoom = 3))
```

## Language Family Statistics

This section shows the distribution of languages across major language families in both traditional and contemporary databases.

```{r family-stats}
#| echo: false  
# Calculate family statistics for contemporary data
contemporary_family_stats <- contemporary_sf %>%
  st_drop_geometry() %>%
  group_by(Family) %>%
  summarise(
    Count = n(),
    .groups = "drop"
  ) %>%
  arrange(desc(Count)) %>%
  head(20) # Top 20 families

# Calculate family statistics for traditional data
traditional_family_stats <- traditional_sf %>%
  st_drop_geometry() %>%
  group_by(Family) %>%
  summarise(
    Count = n(),
    .groups = "drop"
  ) %>%
  arrange(desc(Count)) %>%
  head(20) # Top 20 families

# Create side-by-side interactive bar plots
tagList(
  div(
    style = "display: flex; gap: 20px; margin-bottom: 30px;",
    div(
      style = "flex: 1; height: 500px;",
      h4("Traditional Database", style = "text-align: center;"),
      plot_ly(
        data = traditional_family_stats,
        x = ~Count,
        y = ~ reorder(Family, Count),
        type = "bar",
        orientation = "h",
        marker = list(
          color = viridis(nrow(traditional_family_stats)),
          line = list(color = "rgb(8,48,107)", width = 1.5)
        )
      ) %>%
        layout(
          title = "Traditional Database",
          xaxis = list(title = "Number of Languages"),
          yaxis = list(title = ""),
          margin = list(l = 200)
        )
    ),
    div(
      style = "flex: 1; height: 500px;",
      h4("Contemporary Database", style = "text-align: center;"),
      plot_ly(
        data = contemporary_family_stats,
        x = ~Count,
        y = ~ reorder(Family, Count),
        type = "bar",
        orientation = "h",
        marker = list(
          color = viridis(nrow(contemporary_family_stats)),
          line = list(color = "rgb(8,48,107)", width = 1.5)
        )
      ) %>%
        layout(
          title = "Contemporary Database",
          xaxis = list(title = "Number of Languages"),
          yaxis = list(title = ""),
          margin = list(l = 200)
        )
    )
  )
)
```

### Complete Language Database

```{r language-table}
#| echo: false
# Prepare data for tables with clickable links
traditional_table_data <- traditional_sf %>%
  select(title, Family, Glottocode) %>%
  st_drop_geometry() %>%
  arrange(title) %>%
  mutate(
    Language_Name = paste0('<a href="#" onclick="highlightLanguage(\'', Glottocode, '\', \'traditional\')" style="color: #007bff; text-decoration: underline; cursor: pointer;">', title, '</a>')
  ) %>%
  select(Language_Name, Family, Glottocode)

contemporary_table_data <- contemporary_sf %>%
  select(title, Family, Glottocode) %>%
  st_drop_geometry() %>%
  arrange(title) %>%
  mutate(
    Language_Name = paste0('<a href="#" onclick="highlightLanguage(\'', Glottocode, '\', \'contemporary\')" style="color: #007bff; text-decoration: underline; cursor: pointer;">', title, '</a>')
  ) %>%
  select(Language_Name, Family, Glottocode)

# Create side-by-side tables
tagList(
  div(
    style = "display: flex; gap: 20px; margin-bottom: 30px;",
    div(
      style = "flex: 1;",
      h4("Traditional Database", style = "text-align: center;"),
      datatable(
        traditional_table_data,
        colnames = c("Language Name", "Family", "Glottocode"),
        options = list(
          pageLength = 15,
          order = list(list(0, "asc")),
          scrollX = TRUE,
          columnDefs = list(list(
            targets = 0,
            render = JS("function(data, type, row) { return data; }")
          ))
        ),
        escape = FALSE,
        caption = "Traditional Database"
      )
    ),
    div(
      style = "flex: 1;",
      h4("Contemporary Database", style = "text-align: center;"),
      datatable(
        contemporary_table_data,
        colnames = c("Language Name", "Family", "Glottocode"),
        options = list(
          pageLength = 15,
          order = list(list(0, "asc")),
          scrollX = TRUE,
          columnDefs = list(list(
            targets = 0,
            render = JS("function(data, type, row) { return data; }")
          ))
        ),
        escape = FALSE,
        caption = "Contemporary Database"
      )
    )
  ),
  
  # Add JavaScript for map interaction
  tags$script(HTML("
    // Store map references globally
    window.leafletMaps = {};
    
    function highlightLanguage(glottocode, mapType) {
      console.log('highlightLanguage called with:', glottocode, mapType);
      
      var mapId = mapType === 'traditional' ? 'traditional_main_map' : 'contemporary_main_map';
      var map = window.leafletMaps[mapId];
      
      console.log('Map ID:', mapId);
      console.log('Map found:', !!map);
      
      if (!map) {
        console.log('Map not found:', mapId);
        console.log('Available maps:', Object.keys(window.leafletMaps));
        return;
      }
      
      // Find the layer with the matching Glottocode
      var targetLayer = null;
      map.eachLayer(function(layer) {
        if (layer.options && layer.options.layerId === glottocode) {
          targetLayer = layer;
        }
      });
      
      console.log('Target layer found:', !!targetLayer);
      
      if (targetLayer) {
        // Get the bounds of the layer
        var bounds = targetLayer.getBounds();
        
        // Fit the map to the layer bounds with some padding
        map.fitBounds(bounds, {padding: [20, 20]});
        
        // Highlight the layer temporarily
        targetLayer.setStyle({weight: 4, color: '#ff0000', fillOpacity: 0.9});
        
        // Reset the style after 3 seconds
        setTimeout(function() {
          targetLayer.setStyle({weight: 1, color: '#333333', fillOpacity: 0.8});
        }, 3000);
        
        // Scroll to the correct map section using specific IDs
        var targetSectionId = mapType === 'traditional' ? 'traditional-main-map-section' : 'contemporary-main-map-section';
        var mapSection = document.getElementById(targetSectionId);
        
        console.log('Target section ID:', targetSectionId);
        console.log('Map section found:', !!mapSection);
        
        if (mapSection) {
          mapSection.scrollIntoView({behavior: 'smooth', block: 'start'});
          console.log('Scrolled to section');
        } else {
          console.log('Map section not found:', targetSectionId);
        }
      } else {
        console.log('Language not found:', glottocode);
      }
    }
  "))
)
```

## Technical Implementation

This visualization uses:
- **SF**: For spatial data handling
- **Leaflet**: For interactive mapping
- **Plotly**: For interactive visualizations
- **DT**: For interactive data tables
- **Quarto**: For modern scientific publishing

The application is designed for an initial check of the language maps from the Atlas of the World's Languages. It is deployable on GitHub Pages using Quarto. The script is in the `language-map.qmd` file (partly generated by Cursor). The reformated geojson data are `contemporary_sf.rds` and `traditional_sf.rds`.

---

*Data Sources:*

- Asher, R.E. & Moseley, C. (2007). Atlas of the World's Languages. Routledge.

- Ranacher, P., Forkel, R., Efrat-Kowalsky, N. et al. (2025). A global and interoperable dataset of linguistic distributions derived from the Atlas of the World's Languages. Scientific Data 12, 1466. https://doi.org/10.1038/s41597-025-05828-6
